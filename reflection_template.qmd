---
title: "STAT 331 Portfolio"
author: "Liam Easley"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1

# From Lab 2 Q1

surveys <- read_csv(here::here("Week 2", "Lab 2", "surveys.csv"))

```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2

# From Lab 3 Q2 

teacher_evals <- read_csv(here("Week 3", "Lab 3", "teacher_evals.csv"))

```

-   `xlsx`

```{r}
#| label: wd-1-xlsx


```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1

# Lab 3 Q5

teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  mutate(teacher_id = as.character(teacher_id),
         course_id = as.character(course_id)) |>
  select(course_id, 
         teacher_id, 
         question_no, 
         no_participants, 
         resp_share, 
         SET_score_avg, 
         percent_failed_cur, 
         academic_degree, 
         seniority, 
         sex)

```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2

```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1

# Lab 3 Q5
teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  mutate(
    teacher_id = as.character(teacher_id),
    course_id = as.character(course_id)
  ) |>
  select(
    course_id, teacher_id, question_no, no_participants, resp_share,
    SET_score_avg, percent_failed_cur, academic_degree, seniority, sex
  )
```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-1
 
# Lab 4 Q5

ca_childcare %>% 
  group_by(region, study_year) %>% 
  summarize(med = median(mhi_2018)) %>% 
  filter(study_year == 2008 | study_year == 2018) %>% 
  ungroup() %>% 
  pivot_wider(
              names_from = study_year,
              values_from = med
              ) %>% 
  arrange(desc(`2018`))

```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character

# Lab 5

inner_join(x = get_fit_now_check_in,
           y = get_fit_now_member,
           by = join_by(membership_id == id)
           ) %>% # Join Get Fit check in and membership data by member id
  inner_join(y = person,
             by = join_by(person_id == id)
             ) %>% # Join new data set with person data set by person id
    inner_join(y = drivers_license,
               by = join_by(license_id == id)
               ) %>% # Join previous data set with driver's license data set by license id
      filter(str_detect(membership_id, pattern = "^48Z"),
             membership_status == "gold",
             str_detect(plate_number, pattern = "H42W"),
             gender == "male",
             check_in_date == 20180109
             ) %>% # Filter for a male gold member at Get Fit who checked in on January 9, 2018, with a member id that starts with "48Z", and a license plate containing "H42W"
      pull(name.x) # Extract name of initial suspect
```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

# Lab 5

inner_join(x = person,
           y = interview,
           by = join_by(id == person_id)
           ) %>% # Inner join by `id` and `person_id`
  filter((str_detect(name, pattern = "Annabel") & address_street_name == "Franklin Ave") | 
          (address_street_name == "Northwestern Dr" & address_number == max(address_number))
         ) %>% # Filter for witness 1 (Annabel on Franklin Ave) and witness 2 (last house on Northwestern Dr)
  pull(transcript) # Extract transcripts for witnesses
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date


```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1


```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2


```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1

# Lab 4 Q7

ca_childcare %>% 
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) %>% 
  group_by(region, study_year) %>% 
  summarize(med_infant = median(mc_infant),
            med_toddler = median(mc_toddler),
            med_preschool = median(mc_preschool)) %>% 
  ungroup() %>% 
  pivot_longer(cols = med_infant : med_preschool,
               names_to = "Age Group",
               values_to = "Amount") %>% 
  mutate(`Age Group` = fct_recode(.f = `Age Group`,
                                  "Infant" = "med_infant",
                                  "Toddler" = "med_toddler",
                                  "Preschool" = "med_preschool"),
         `Age Group` = fct_relevel(`Age Group`, "Infant", "Toddler", "Preschool")
         ) %>% 
  ggplot(mapping = aes(x = study_year,
                       y = Amount,
                       color = fct_reorder2(.f = region,
                                            .x = study_year,
                                            .y = Amount)
                       )) +
    facet_wrap(~`Age Group`) +
    geom_point() +
    geom_smooth(method = loess, formula = y ~ x) +
    labs(x = "Study Year",
         y = NULL,
         title = "Weekly Median Price for Center-Based Childcare ($)",
         color = "California Region") +
    scale_x_continuous(breaks = seq(2008, 2018, by =2)) +
    theme_bw() +
    theme(aspect.ratio = 1,
          axis.text.x  = element_text(size = 5),
          plot.title = element_text(size = 10),
          legend.text = element_text(size = 6.5)) +
    scale_y_continuous(labels = scales::label_currency(prefix = "$"))
```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2

# Lab 4 Q7

ca_childcare %>% 
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) %>% 
  group_by(region, study_year) %>% 
  summarize(med_infant = median(mc_infant),
            med_toddler = median(mc_toddler),
            med_preschool = median(mc_preschool)) %>% 
  ungroup() %>% 
  pivot_longer(cols = med_infant : med_preschool,
               names_to = "Age Group",
               values_to = "Amount") %>% 
  mutate(`Age Group` = fct_recode(.f = `Age Group`,
                                  "Infant" = "med_infant",
                                  "Toddler" = "med_toddler",
                                  "Preschool" = "med_preschool"),
         `Age Group` = fct_relevel(`Age Group`, "Infant", "Toddler", "Preschool")
         ) %>% 
  ggplot(mapping = aes(x = study_year,
                       y = Amount,
                       color = fct_reorder2(.f = region,
                                            .x = study_year,
                                            .y = Amount)
                       )) +
    facet_wrap(~`Age Group`) +
    geom_point() +
    geom_smooth(method = loess, formula = y ~ x) +
    labs(x = "Study Year",
         y = NULL,
         title = "Weekly Median Price for Center-Based Childcare ($)",
         color = "California Region") +
    scale_x_continuous(breaks = seq(2008, 2018, by =2)) +
    theme_bw() +
    theme(aspect.ratio = 1,
          axis.text.x  = element_text(size = 5),
          plot.title = element_text(size = 10),
          legend.text = element_text(size = 6.5)) +
    scale_y_continuous(labels = scales::label_currency(prefix = "$"))
```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string


```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1

# Lab 4 Q3

ca_childcare <- ca_childcare %>% 
  left_join(y = tax_rev,
            by = join_by(county_name == entity_name, study_year == year)
            )
```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right

# Lab 4 Q3 (modified)

ca_childcare <- tax_rev %>% 
  left_join(y = ca_childcare,
            by = join_by(entity_name == county_name, year == study_year)
            )
```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2

```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1

# Lab 5

inner_join(x = person,
           y = interview,
           by = join_by(id == person_id)
           ) %>% # Inner join by `id` and `person_id`
  filter((str_detect(name, pattern = "Annabel") & address_street_name == "Franklin Ave") | 
          (address_street_name == "Northwestern Dr" & address_number == max(address_number))
         ) %>% # Filter for witness 1 (Annabel on Franklin Ave) and witness 2 (last house on Northwestern Dr)
  pull(transcript) # Extract transcripts for witnesses
```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2

# Lab 5

inner_join(x = get_fit_now_check_in,
           y = get_fit_now_member,
           by = join_by(membership_id == id)
           ) %>% # Join Get Fit check in and membership data by member id
  inner_join(y = person,
             by = join_by(person_id == id)
             ) %>% # Join new data set with person data set by person id
    inner_join(y = drivers_license,
               by = join_by(license_id == id)
               ) %>% # Join previous data set with driver's license data set by license id
      filter(str_detect(membership_id, pattern = "^48Z"),
             membership_status == "gold",
             str_detect(plate_number, pattern = "H42W"),
             gender == "male",
             check_in_date == 20180109
             ) %>% # Filter for a male gold member at Get Fit who checked in on January 9, 2018, with a member id that starts with "48Z", and a license plate containing "H42W"
      pull(name.x) # Extract name of initial suspect
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

# Lab 4 Q7

ca_childcare %>% 
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) %>% 
  group_by(region, study_year) %>% 
  summarize(med_infant = median(mc_infant),
            med_toddler = median(mc_toddler),
            med_preschool = median(mc_preschool)) %>% 
  ungroup() %>% 
  pivot_longer(cols = med_infant : med_preschool,
               names_to = "Age Group",
               values_to = "Amount") %>% 
  mutate(`Age Group` = fct_recode(.f = `Age Group`,
                                  "Infant" = "med_infant",
                                  "Toddler" = "med_toddler",
                                  "Preschool" = "med_preschool"),
         `Age Group` = fct_relevel(`Age Group`, "Infant", "Toddler", "Preschool")
         ) %>% 
  ggplot(mapping = aes(x = study_year,
                       y = Amount,
                       color = fct_reorder2(.f = region,
                                            .x = study_year,
                                            .y = Amount)
                       )) +
    facet_wrap(~`Age Group`) +
    geom_point() +
    geom_smooth(method = loess, formula = y ~ x) +
    labs(x = "Study Year",
         y = NULL,
         title = "Weekly Median Price for Center-Based Childcare ($)",
         color = "California Region") +
    scale_x_continuous(breaks = seq(2008, 2018, by =2)) +
    theme_bw() +
    theme(aspect.ratio = 1,
          axis.text.x  = element_text(size = 5),
          plot.title = element_text(size = 10),
          legend.text = element_text(size = 6.5)) +
    scale_y_continuous(labels = scales::label_currency(prefix = "$"))
```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide

# Lab 4 Q5

ca_childcare %>% 
  group_by(region, study_year) %>% 
  summarize(med = median(mhi_2018)) %>% 
  filter(study_year == 2008 | study_year == 2018) %>% 
  ungroup() %>% 
  pivot_wider(
              names_from = study_year,
              values_from = med
              ) %>% 
  arrange(desc(`2018`))
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Lab 2
-   Lab 3
-   Lab 4
-   Lab 5
-   Challenge 3

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

# Lab 2 Q16

ggplot(data = surveys, 
       mapping = aes(y = species, x = weight)) +
  geom_jitter(alpha = 0.1, color = "steelblue") +
  geom_boxplot(outlier.shape = NA) +
  labs(y = "Species",
       x = "Weight (g)"
       )

```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

# Lab 4 Q3

ca_childcare <- ca_childcare %>% 
  left_join(y = tax_rev,
            by = join_by(county_name == entity_name, study_year == year)
            )
```

-   Example of function formatting

```{r}
#| label: r-2-3


```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example


```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num

# Lab 2 Q4

ggplot(data = surveys,
       mapping = aes(x = weight, y = hindfoot_length)) +
  geom_point(alpha = .1) +
  facet_wrap(~species) +
  labs(x = "Hindfoot Length (mm)",
       y = NULL,
       title = "Rodent Observations from the Portal Project",
       subtitle = "Weight (g)")
```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

# Lab 2 Q8

ggplot(data = surveys, 
       mapping = aes(x = species, y = weight)) +
  geom_jitter(alpha = 0.1, color = "steelblue") +
  geom_boxplot(outlier.shape = NA) +
  labs(x = "Species", y = "Weight (g)") +
  theme(axis.text.x = element_text(angle = 45))
```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat

# Challenge 2

ggplot(data = surveys, 
       mapping = aes(y = species, x = weight, fill = sex)) +
  geom_jitter(alpha = 0.1, color = "steelblue") +
  geom_boxplot(outlier.shape = NA) +
  labs(subtitle = "Species", y = NULL, x = "Weight (g)", fill = "Sex") +
  scale_fill_brewer(palette = "PuRd") +
  theme_bw()
```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date


```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1

# Challenge 2

ggplot(data = surveys, 
       mapping = aes(y = species, x = weight, fill = sex)) +
  geom_jitter(alpha = 0.1, color = "steelblue") +
  geom_boxplot(outlier.shape = NA) +
  labs(subtitle = "Species", y = NULL, x = "Weight (g)", fill = "Sex") +
  scale_fill_brewer(palette = "PuRd") +
  theme_bw()
```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2

# Challenge 3 Q2

teacher_evals_compare |> 
  ggplot(mapping = aes(x = sen_level, fill = SET_level)) +
    geom_bar(stat = "count", position = "fill") +
    scale_y_continuous(labels = percent_format()) +
    scale_fill_manual(
      values = c("excellent" = "#b896d4",
                 "standard" = "#ba955c"
                 )) +
    labs(title = "Evaluation of Teachers' Use of Activities",
         x = "Years of Experience",
         y = NULL,
         fill = "Evaluation Rating"
         ) +
    theme_bw() +
    theme(legend.position = "top")
```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3

# Lab 4 Q8

mhi_cbc <- ca_childcare %>% 
  select(region, study_year, mhi_2018, mc_infant) %>% 
  group_by(region, study_year) %>% 
  summarize(med_mhi_2018 = median(mhi_2018),
            med_mc_infant = median(mc_infant)) %>% 
  ungroup()

mhi_cbc %>% 
  ggplot(mapping = aes(x = med_mhi_2018,
                       y = med_mc_infant)) +
    geom_point() + 
    geom_smooth(method = lm) +
    theme_bw() +
    labs(x = "Median Household Income (in 2018 dollars)",
         y = "Full-time median weekly price",
         title = "California Household Income and Center-based Childcare for Infants") +
    scale_x_continuous(labels = scales::label_currency(prefix = "$")) +
    scale_y_continuous(labels = scales::label_currency(prefix = "$"))
```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4

# Lab 2 Q8

ggplot(data = surveys, 
       mapping = aes(x = species, y = weight)) +
  geom_jitter(alpha = 0.1, color = "steelblue") +
  geom_boxplot(outlier.shape = NA) +
  labs(x = "Species", y = "Weight (g)") +
  theme(axis.text.x = element_text(angle = 45))
```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5

# Lab 4 Q7


ca_childcare %>% 
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) %>% 
  group_by(region, study_year) %>% 
  summarize(med_infant = median(mc_infant),
            med_toddler = median(mc_toddler),
            med_preschool = median(mc_preschool)) %>% 
  ungroup() %>% 
  pivot_longer(cols = med_infant : med_preschool,
               names_to = "Age Group",
               values_to = "Amount") %>% 
  mutate(`Age Group` = fct_recode(.f = `Age Group`,
                                  "Infant" = "med_infant",
                                  "Toddler" = "med_toddler",
                                  "Preschool" = "med_preschool"),
         `Age Group` = fct_relevel(`Age Group`, "Infant", "Toddler", "Preschool")
         ) %>% 
  ggplot(mapping = aes(x = study_year,
                       y = Amount,
                       color = fct_reorder2(.f = region,
                                            .x = study_year,
                                            .y = Amount)
                       )) +
    facet_wrap(~`Age Group`) +
    geom_point() +
    geom_smooth(method = loess, formula = y ~ x) +
    labs(x = "Study Year",
         y = NULL,
         title = "Weekly Median Price for Center-Based Childcare ($)",
         color = "California Region") +
    scale_x_continuous(breaks = seq(2008, 2018, by =2)) +
    theme_bw() +
    theme(aspect.ratio = 1,
          axis.text.x  = element_text(size = 5),
          plot.title = element_text(size = 10),
          legend.text = element_text(size = 6.5)) +
    scale_y_continuous(labels = scales::label_currency(prefix = "$"))
```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1


# Challenge 2

ggplot(data = surveys, 
       mapping = aes(y = species, x = weight, fill = sex)) +
  geom_jitter(alpha = 0.1, color = "steelblue") +
  geom_boxplot(outlier.shape = NA) +
  labs(subtitle = "Species", y = NULL, x = "Weight (g)", fill = "Sex") +
  scale_fill_brewer(palette = "PuRd") +
  theme_bw()
```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2


```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize

# Lab 4 Q6

ca_childcare %>% 
  group_by(region, study_year) %>% 
  summarize(med_infant = median(mc_infant)) %>% 
  filter(study_year == 2018) %>% 
  ungroup() %>% 
  pivot_wider(
              names_from = study_year,
              values_from = med_infant
              ) %>% 
  slice_min(order_by = `2018`)
```

-   Example using `across()`

```{r}
#| label: dvs-4-across


```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

# Lab 3 Q9

teacher_evals_clean |>
  group_by(course_id, teacher_id) |>
  summarize(questions_count = n_distinct(question_no)) |>
  filter(questions_count == 9)|>
  ungroup()
```

-   Example 2

```{r}
#| label: dvs-5-2

# Lab 4 Q5

ca_childcare %>% 
  group_by(region, study_year) %>% 
  summarize(med = median(mhi_2018)) %>% 
  filter(study_year == 2008 | study_year == 2018) %>% 
  ungroup() %>% 
  pivot_wider(
              names_from = study_year,
              values_from = med
              ) %>% 
  arrange(desc(`2018`))

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1


```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3

```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1

```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2

# Lab 4 Q5

ca_childcare %>% 
  group_by(region, study_year) %>% 
  summarize(med = median(mhi_2018)) %>% 
  filter(study_year == 2008 | study_year == 2018) %>% 
  ungroup() %>% 
  pivot_wider(
              names_from = study_year,
              values_from = med
              ) %>% 
  arrange(desc(`2018`))

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

# Lab 5

crime_scene_report %>% 
  filter(date == 20180115,
         type == "murder",
         city == "SQL City") %>% # Filtering for murders in SQL city on January 15, 2018
  pull(description) # Extracting description
```

-   using `across()`

```{r}
#| label: pe-1-across


```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1


```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

```

-   Example 2

```{r}
#| label: dsm-2-2

```

-   Example 3

```{r}
#| label: dsm-2-3

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
